" To open result of a grep in vim, do:
" vim $(grep -ril [searchstring] [directory])
"
" $$$$$$$$\      $$\    $$\ $$\
" \____$$  |     $$ |   $$ |\__|
"     $$  /      $$ |   $$ |$$\ $$$$$$\$$$$\
"    $$  /$$$$$$\\$$\  $$  |$$ |$$  _$$  _$$\
"   $$  / \______|\$$\$$  / $$ |$$ / $$ / $$ |
"  $$  /           \$$$  /  $$ |$$ | $$ | $$ |
" $$$$$$$$\         \$  /   $$ |$$ | $$ | $$ |
" \________|         \_/    \__|\__| \__| \__| by Zach Taira
"
" ============================================================================
" INDEX
" ============================================================================
" 0) Index
" 1) Default Settings
" 2) Plugins
" 3) Mappings
" 4) Useful Functions

" ============================================================================
" DEFAULT SETTINGS
" ============================================================================
set wildmenu
set wildmode=full
" Don't set shell. This causes problems.
" set shellcmdflag+=lic
" Color scheme
set t_Co=256
" colo dzachscheme
colo bzachscheme
syntax on
" Set the cursor lines to be on
set cursorline cursorcolumn colorcolumn=80
set list lcs=tab:\|\
" Set line numbers on
set number
" Set search options
set incsearch ignorecase smartcase
" Fix compatilility issues
set nocompatible
" Mouse
set mouse=
" Tabs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
" Status Line
" Continuous update of current song makes vim laggy
" Therefore, that's only done on save
set laststatus=2
set statusline=
            \%-20.20F
            \%-20.20([b%n]%y%m%)
            \%-20.20([%l,\ %c]%)
autocmd BufWritePost * :call UpdateStatusline()
" Wrap
set nowrap
" Automatically open start.txt in a new window
" autocmd VimEnter * :badd ~/start.txt
" autocmd VimEnter * :vertical belowright sb start.txt
set noswapfile
set nobackup
set nowritebackup
" Autoindent sucks, don't use it. I'll do it myself.
set noautoindent
setlocal indentkeys-=:
setlocal indentkeys-=#
" set the title to something kinda sane
set title
"
" Vim folding autocommands
" autocmd VimEnter zman.md :source ~/.vim/syntax/zman.vim
" autocmd VimEnter *notes.md :source ~/.vim/syntax/notes.vim
" autocmd VimEnter zzman.md :source ~/.vim/syntax/notes.vim
" ============================================================================
" PLUGINS
" ============================================================================
" plugins - call :source % then :PlugInstall to update
call plug#begin('~/.vim/plugged')
    " -------------------------------------
    " Licensed Plugins
    " -------------------------------------
    " plugin for managing brackets
    " same license as vim
    Plug 'tpope/vim-surround'
    " plugin for spacing
    " 3-clause BSD
    Plug 'godlygeek/tabular'
    " plugin for gitgutter
    " MIT
    Plug 'airblade/vim-gitgutter'
    " vim wiki
    " MIT
    Plug 'vimwiki/vimwiki'
    " Rust
    " MIT or Apache 2.0
    Plug 'rust-lang/rust.vim'
    " Python code formatting
    " MIT
    Plug 'psf/black'
    " Minimap
    " MIT
    " Requires rust + cargo
    Plug 'wfxr/minimap.vim'
    " Intellisense/Language Server Protocol support for vim/neovim 
    " MIT
    " Requires certain node versions, can install via nvm
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    " :CocInstall coc-jedi
    " ^^^ pappasam/coc-jedi
    " :CocInstall coc-rust-analyzer
    " ^^^ fannheyward/coc-rust-analyzer
    " :CocInstall coc-tsserver
    " ^^^ neoclide/coc-tsserver
    " BSD 3-Clause 'New' or 'Revised' License
    " Plug 'wakatime/vim-wakatime'

    " -------------------------------------
    " Unlicensed Plugins
    " -------------------------------------
    " git wrapper for vim
    Plug 'tpope/vim-fugitive'
    " file directory plugin
    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

    " -------------------------------------
    " Trial Plugins
    " -------------------------------------
    " easy file finding
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    " Plug 'github/copilot.vim'

    " -------------------------------------
    " Unused Plugins
    " -------------------------------------
    " Enhanced python syntax highlighting
    " Plug 'vim-python/python-syntax'
    " plugins for syntax checking
    " Plug 'scrooloose/syntastic'
    " Plug 'shutnik/jshint2.vim'
    " Python plugin
    " MIT
    " Plug 'davidhalter/jedi-vim'
call plug#end()

" For syntax checkers:
" let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
" let g:syntastic_javascript_checkers = ['jshint']
" let g:jedi#completions_enabled = 1
" let g:jedi#use_splits_not_buffers = "right"
" let g:jedi#popup_on_dot = 0
" let g:jedi#popup_select_first = 1
" let g:jedi#show_call_signatures = 1
filetype plugin on

" ============================================================================
" MAPPINGS - normal maps, insert maps, and visual maps
" ============================================================================
let mapleader = ' '
" NORMAL MAPS
"
" Plugin mappings - for making plugins easier
" NerdTree
nnoremap <leader>ntt :NERDTreeToggle<cr>
" Minimap
nnoremap <leader>mm :MinimapToggle<cr>100<C-w>w

" Text manipulation mappings - for manipulating text
" Python Comment
nnoremap <leader>pc :call EasyLineComment('# ')<cr>
" C Comment
nnoremap <leader>cc :call EasyLineComment('//')<cr>
" LaTeX Comment
nnoremap <leader>lc :call EasyLineComment('% ')<cr>
" Move Line Down
nnoremap <leader>ld :call MoveLinesDown(1)<cr>
" Move Line Up
nnoremap <leader>lu :call MoveLinesUp(1)<cr>
" Insert newline above
nnoremap <leader>O :execute "normal! O\e"<cr>
" Insert newline below
nnoremap <leader>o :execute "normal! o\ek"<cr>
" Move word to the next line (Could use refining)
nnoremap <leader>wd :execute "normal! $b\"acE\e\r\"bc$\e\"apa \e\"bpk0"<cr>
" Move word to the previous line (Could use refining)
nnoremap <leader>wu :execute "normal! k\r\"acE\exk$a \e\"apj0"<cr>
" Set paste and nopaste
nnoremap <leader>sp :set paste<cr>
nnoremap <leader>snp :set nopaste<cr>
" Search
nnoremap <leader><cr> :Telescope find_files prompt_prefix=üîç<cr>
nnoremap <leader>nt :Telescope file_browser prompt_prefix=üîç<cr>
nnoremap <leader>rg :Telescope live_grep prompt_prefix=üîç<cr>

" File Manipulation mappings
" (for opening, closing, saving, compiling, and running files)
" Open New File
nnoremap <leader>nf :vert new file.txt
" Save File
nnoremap <leader>uh :w<cr>
nnoremap <leader>aoeu :w<cr>
" Compile file with LaTeX
nnoremap <leader>la :call LaTeXToPDF()<cr>

" Quit and write to file
nnoremap <leader>q :wq<cr>
" Quit but don't write to file
nnoremap <leader>qq :q!<cr>
" Print current directory
nnoremap <leader>pwd :pwd<cr>
" Run executable
nnoremap <leader>re :!./output
" Run Python File
nnoremap <leader>rp :!python %:p<cr>
" Show All Buffers
nnoremap <leader>bf :buffers<cr>
" Add Buffer
nnoremap <leader>ba :botright vsp **/*
" Buffer Close
nnoremap <leader>bc :bd<cr>
" Next Buffer
nnoremap <leader>bn :bnext<cr>
" Previous Buffer
nnoremap <leader>nb :bprevious<cr>
" Show registers
nnoremap <leader>reg :registers<cr>
" Run through pylint
nnoremap <leader>pl :!pylint %:t<cr>
" Run through pep8
nnoremap <leader>p8 :!pep8 %:t<cr>
" Save to my vim folder
nnoremap <leader>svim :w! /Users/zacharytaira/Desktop/10.4.15/School/2016S/dotfiles/vim/%:t<cr>
" Save to my bash folder
nnoremap <leader>sbash :w! /Users/zacharytaira/Desktop/10.4.15/School/2016S/dotfiles/bash/%:t<cr>

" Vim Mappings
" (mappings that help alter the current vim session)
" Number-relativeNumber
nnoremap <leader>nn :call NumberToggle()<cr>
" VIm preferences
nnoremap <leader>vi :vsplit $MYVIMRC<cr>
" Next Window
nnoremap <leader>nw <C-w><C-w>
" Easier colon
nnoremap ; :
" Access the command line?
nnoremap <leader>cl :!
" Make a new visual split with the next buffer
nnoremap <leader>vs :vertical botright sbn<cr>
" Display invisible characters
nnoremap <leader>li :set list! listchars=eol:$,tab:\<bar>\<space>,trail:~
" Set expandtab
nnoremap <leader>et :set expandtab!

" Git Mappings
" (mappings that help with version control)
" Git Commit
nnoremap <leader>gc :!git commit -m
" Git Push
nnoremap <leader>gp :!git push
" Git Diff
nnoremap <leader>gd :!git diff
" Git Add
nnoremap <leader>ga :!git add

" SVG Notes open
nnoremap <leader>gl :edit <cword>.md

" VISUAL MAPS
" Move variable amount of lines down and reselect in visual mode
vnoremap <leader>ld : <bar> call VMoveLinesDown()<cr><cr>
" Move variable amount of lines up and reselect in visual mode
vnoremap <leader>lu : <bar> call VMoveLinesUp()<cr><cr>

" INSERT MAPS
" Arrow keys automatically exit insert mode
inoremap <Up> <Esc><Up>
inoremap <Down> <Esc><Down>
inoremap <Left> <Esc><Left>
inoremap <Right> <Esc><Right>
" Add the ability to save from inside insert mode
inoremap <leader>sf <Esc>:w<cr>l
" Mappings to open and close parentheses in LaTeX
inoremap xmo \(
inoremap xmc \)

" ============================================================================
" USEFUL FUNCTIONS
" ============================================================================
" function to toggle :set number and :set relativenumber
function! NumberToggle()
    set relativenumber!
endfunction

" Function to move a variable amount of lines down 1 line
function! MoveLinesDown(lines)
    execute "normal! \"a" . a:lines . "dddd\"aPPj"
endfunction

" Function to move a variable amount of lines up 1 line
function! MoveLinesUp(lines)
    execute "normal! \"a" . a:lines . "ddkP"
endfunction

" Function to move multiple lines down in visual mode
function! VMoveLinesDown()
    let front = line("'<")
    let back = line("'>")
    execute "normal! " . back . "Gjdd" . front . "GPgv"
endfunction

" Function to move multiple lines up in visual mode
function! VMoveLinesUp()
    let front = line("'<")
    let back = line("'>")
    execute "normal! " . front . "Gkdd" . back . "GPgv"
endfunction

" Function to get current song playing on Spotify
function! GetCurrentSong()
    " Get the current song title and trim the \n
    let l:cname=system("osascript -e 'tell Application \"System Events\"\n
                \ if application process \"Spotify\" exists then\n
                \ tell application \"Spotify\" to name of
                \ current track as string\n
                \ end if\n
                \ end tell'")
    let l:cname = l:cname[:-2]
    " Get the current song's artist and trim the \n
    let l:cartist=system("osascript -e 'tell Application \"System Events\"\n
                \ if application process \"Spotify\" exists then\n
                \ tell application \"Spotify\" to artist of
                \ current track as string\n
                \ end if\n
                \ end tell'")
    let l:cartist = l:cartist[:-2]
    " If there's no song, string=None. Else, string=Name-Artist
    if strlen(l:cname)==?0
        let l:cname="None"
    else
        let l:cname=l:cname . "-" . l:cartist
    endif
    return l:cname
endfunction

" function to update statusline
function! UpdateStatusline()
    let g:song=GetCurrentSong()
    set statusline=
                \%-35.35F
                \%-20.20([%l,\ %c][b%n]%y%m%)
                \%-20.20{g:song}
                "\%-20.20([])
endfunction

" function to do or undo python or c comments
function! EasyLineComment(...)
    execute "normal! ^"
    let l:commentsymbol=matchstr(getline('.'), '\%' . col('.') . 'c.')
    execute "normal! l"
    let l:commentsymbol2=matchstr(getline('.'), '\%' . col('.') . 'c.')
    let l:indicator=l:commentsymbol . l:commentsymbol2
    if l:indicator ==? a:1
        execute "normal! ^dw"
    elseif a:1 ==? "# "
        execute "normal! ^i# \e"
    elseif a:1 ==? "//"
        execute "normal! ^i// \e"
    elseif a:1 ==? "% "
        execute "normal! ^i% \e"
    endif
endfunction

" returns the line number of the given mark
function! GetMarkLine(...)
    let l:filter="cat ~/.viminfo |
                \ grep \"\\\'" . a:1 . " \\d* \\d* .*\" |
                \ sed -E \"s/\\\'" . a:1 . "  ([0-9]+)  ([0-9]+).*/\\1/\""
    let l:linenumber=system(l:filter)
    return l:linenumber
endfunction

" returns the column number of the given mark
function! GetMarkColumn(...)
    let l:filter="cat ~/.viminfo |
                \ grep \"\\\'" . a:1 . " \\d* \\d* .*\" |
                \ sed -E \"s/\\\'" . a:1 . "  ([0-9]+)  ([0-9]+).*/\\2/\""
    let l:linecolumn=system(l:filter)
    return l:linecolumn
endfunction

" Convert line to qwerty
function! QwertyLine()
    execute "normal! $mA^mB"
    execute "wv"
    let l:apos=GetMarkColumn('A')
    let l:bpos=GetMarkColumn('B')
    call QwertyLetter()
    while l:bpos<l:apos
        execute "normal! lmB"
        call QwertyLetter()
        let l:bpos=l:bpos+1
    endwhile
endfunction

" Convert line to dvorak
function! DvorakLine()
    execute "normal! $mA^mB"
    execute "wv"
    let l:apos=GetMarkColumn('A')
    let l:bpos=GetMarkColumn('B')
    call DvorakLetter()
    while l:bpos<l:apos
        execute "normal! lmB"
        call DvorakLetter()
        let l:bpos=l:bpos+1
    endwhile
endfunction

" Convert letter to qwerty
function! QwertyLetter()
    let l:currentcharacter=matchstr(getline('.'), '\%' . col('.') . 'c.')
    if l:currentcharacter==#"["
        execute "normal! s-\e"
    elseif l:currentcharacter==#"{"
        execute "normal! s_\e"
    elseif l:currentcharacter==#"]"
        execute "normal! s=\e"
    elseif l:currentcharacter==#"}"
        execute "normal! s+\e"
    elseif l:currentcharacter==#"'"
        execute "normal! sq\e"
    elseif l:currentcharacter==#"\""
        execute "normal! sQ\e"
    elseif l:currentcharacter==#","
        execute "normal! sw\e"
    elseif l:currentcharacter==#"<"
        execute "normal! sW\e"
    elseif l:currentcharacter==#"."
        execute "normal! se\e"
    elseif l:currentcharacter==#">"
        execute "normal! sE\e"
    elseif l:currentcharacter==#"p"
        execute "normal! sr\e"
    elseif l:currentcharacter==#"P"
        execute "normal! sR\e"
    elseif l:currentcharacter==#"y"
        execute "normal! st\e"
    elseif l:currentcharacter==#"Y"
        execute "normal! sT\e"
    elseif l:currentcharacter==#"f"
        execute "normal! sy\e"
    elseif l:currentcharacter==#"F"
        execute "normal! sY\e"
    elseif l:currentcharacter==#"g"
        execute "normal! su\e"
    elseif l:currentcharacter==#"G"
        execute "normal! sU\e"
    elseif l:currentcharacter==#"c"
        execute "normal! si\e"
    elseif l:currentcharacter==#"C"
        execute "normal! sI\e"
    elseif l:currentcharacter==#"r"
        execute "normal! so\e"
    elseif l:currentcharacter==#"R"
        execute "normal! sO\e"
    elseif l:currentcharacter==#"l"
        execute "normal! sp\e"
    elseif l:currentcharacter==#"L"
        execute "normal! sP\e"
    elseif l:currentcharacter==#"/"
        execute "normal! s[\e"
    elseif l:currentcharacter==#"?"
        execute "normal! s{\e"
    elseif l:currentcharacter==#"="
        execute "normal! s]\e"
    elseif l:currentcharacter==#"+"
        execute "normal! s}\e"
    elseif l:currentcharacter==#"\\"
        execute "normal! s\\\e"
    elseif l:currentcharacter==#"|"
        execute "normal! s|\e"
    elseif l:currentcharacter==#"a"
        execute "normal! sa\e"
    elseif l:currentcharacter==#"A"
        execute "normal! sA\e"
    elseif l:currentcharacter==#"o"
        execute "normal! ss\e"
    elseif l:currentcharacter==#"O"
        execute "normal! sS\e"
    elseif l:currentcharacter==#"e"
        execute "normal! sd\e"
    elseif l:currentcharacter==#"E"
        execute "normal! sD\e"
    elseif l:currentcharacter==#"u"
        execute "normal! sf\e"
    elseif l:currentcharacter==#"U"
        execute "normal! sF\e"
    elseif l:currentcharacter==#"i"
        execute "normal! sg\e"
    elseif l:currentcharacter==#"I"
        execute "normal! sG\e"
    elseif l:currentcharacter==#"d"
        execute "normal! sh\e"
    elseif l:currentcharacter==#"D"
        execute "normal! sH\e"
    elseif l:currentcharacter==#"h"
        execute "normal! sj\e"
    elseif l:currentcharacter==#"H"
        execute "normal! sJ\e"
    elseif l:currentcharacter==#"t"
        execute "normal! sk\e"
    elseif l:currentcharacter==#"T"
        execute "normal! sK\e"
    elseif l:currentcharacter==#"n"
        execute "normal! sl\e"
    elseif l:currentcharacter==#"N"
        execute "normal! sL\e"
    elseif l:currentcharacter==#"s"
        execute "normal! s;\e"
    elseif l:currentcharacter==#"S"
        execute "normal! s:\e"
    elseif l:currentcharacter==#"-"
        execute "normal! s'\e"
    elseif l:currentcharacter==#"_"
        execute "normal! s\"\e"
    elseif l:currentcharacter==#";"
        execute "normal! sz\e"
    elseif l:currentcharacter==#":"
        execute "normal! sZ\e"
    elseif l:currentcharacter==#"q"
        execute "normal! sx\e"
    elseif l:currentcharacter==#"Q"
        execute "normal! sX\e"
    elseif l:currentcharacter==#"j"
        execute "normal! sc\e"
    elseif l:currentcharacter==#"J"
        execute "normal! sC\e"
    elseif l:currentcharacter==#"k"
        execute "normal! sv\e"
    elseif l:currentcharacter==#"K"
        execute "normal! sV\e"
    elseif l:currentcharacter==#"x"
        execute "normal! sb\e"
    elseif l:currentcharacter==#"X"
        execute "normal! sB\e"
    elseif l:currentcharacter==#"b"
        execute "normal! sn\e"
    elseif l:currentcharacter==#"B"
        execute "normal! sN\e"
    elseif l:currentcharacter==#"m"
        execute "normal! sm\e"
    elseif l:currentcharacter==#"M"
        execute "normal! sM\e"
    elseif l:currentcharacter==#"w"
        execute "normal! s,\e"
    elseif l:currentcharacter==#"W"
        execute "normal! s<\e"
    elseif l:currentcharacter==#"v"
        execute "normal! s.\e"
    elseif l:currentcharacter==#"V"
        execute "normal! s>\e"
    elseif l:currentcharacter==#"z"
        execute "normal! s/\e"
    elseif l:currentcharacter==#"Z"
        execute "normal! s?\e"
    endif
endfunction

" Convert letter to dvorak
function! DvorakLetter()
    let l:currentcharacter=matchstr(getline('.'), '\%' . col('.') . 'c.')
    if l:currentcharacter==#"-"
        execute "normal! s[\e"
    elseif l:currentcharacter==#"_"
        execute "normal! s{\e"
    elseif l:currentcharacter==#"="
        execute "normal! s]\e"
    elseif l:currentcharacter==#"+"
        execute "normal! s}\e"
    elseif l:currentcharacter==#"q"
        execute "normal! s'\e"
    elseif l:currentcharacter==#"Q"
        execute "normal! s\"\e"
    elseif l:currentcharacter==#"w"
        execute "normal! s,\e"
    elseif l:currentcharacter==#"W"
        execute "normal! s<\e"
    elseif l:currentcharacter==#"e"
        execute "normal! s.\e"
    elseif l:currentcharacter==#"E"
        execute "normal! s>\e"
    elseif l:currentcharacter==#"r"
        execute "normal! sp\e"
    elseif l:currentcharacter==#"R"
        execute "normal! sP\e"
    elseif l:currentcharacter==#"t"
        execute "normal! sy\e"
    elseif l:currentcharacter==#"T"
        execute "normal! sY\e"
    elseif l:currentcharacter==#"y"
        execute "normal! sf\e"
    elseif l:currentcharacter==#"Y"
        execute "normal! sF\e"
    elseif l:currentcharacter==#"u"
        execute "normal! sg\e"
    elseif l:currentcharacter==#"U"
        execute "normal! sG\e"
    elseif l:currentcharacter==#"i"
        execute "normal! sc\e"
    elseif l:currentcharacter==#"I"
        execute "normal! sC\e"
    elseif l:currentcharacter==#"o"
        execute "normal! sr\e"
    elseif l:currentcharacter==#"O"
        execute "normal! sR\e"
    elseif l:currentcharacter==#"p"
        execute "normal! sl\e"
    elseif l:currentcharacter==#"P"
        execute "normal! sL\e"
    elseif l:currentcharacter==#"["
        execute "normal! s/\e"
    elseif l:currentcharacter==#"{"
        execute "normal! s?\e"
    elseif l:currentcharacter==#"]"
        execute "normal! s=\e"
    elseif l:currentcharacter==#"}"
        execute "normal! s+\e"
    elseif l:currentcharacter==#"\\"
        execute "normal! s\\\e"
    elseif l:currentcharacter==#"|"
        execute "normal! s|\e"
    elseif l:currentcharacter==#"a"
        execute "normal! sa\e"
    elseif l:currentcharacter==#"A"
        execute "normal! sA\e"
    elseif l:currentcharacter==#"s"
        execute "normal! so\e"
    elseif l:currentcharacter==#"S"
        execute "normal! sO\e"
    elseif l:currentcharacter==#"d"
        execute "normal! se\e"
    elseif l:currentcharacter==#"D"
        execute "normal! sE\e"
    elseif l:currentcharacter==#"f"
        execute "normal! su\e"
    elseif l:currentcharacter==#"F"
        execute "normal! sU\e"
    elseif l:currentcharacter==#"g"
        execute "normal! si\e"
    elseif l:currentcharacter==#"G"
        execute "normal! sI\e"
    elseif l:currentcharacter==#"h"
        execute "normal! sd\e"
    elseif l:currentcharacter==#"H"
        execute "normal! sD\e"
    elseif l:currentcharacter==#"j"
        execute "normal! sh\e"
    elseif l:currentcharacter==#"J"
        execute "normal! sH\e"
    elseif l:currentcharacter==#"k"
        execute "normal! st\e"
    elseif l:currentcharacter==#"K"
        execute "normal! sT\e"
    elseif l:currentcharacter==#"l"
        execute "normal! sn\e"
    elseif l:currentcharacter==#"L"
        execute "normal! sN\e"
    elseif l:currentcharacter==#";"
        execute "normal! ss\e"
    elseif l:currentcharacter==#":"
        execute "normal! sS\e"
    elseif l:currentcharacter==#"'"
        execute "normal! s-\e"
    elseif l:currentcharacter==#"\""
        execute "normal! s_\e"
    elseif l:currentcharacter==#"z"
        execute "normal! s;\e"
    elseif l:currentcharacter==#"Z"
        execute "normal! s:\e"
    elseif l:currentcharacter==#"x"
        execute "normal! sq\e"
    elseif l:currentcharacter==#"X"
        execute "normal! sQ\e"
    elseif l:currentcharacter==#"c"
        execute "normal! sj\e"
    elseif l:currentcharacter==#"C"
        execute "normal! sJ\e"
    elseif l:currentcharacter==#"v"
        execute "normal! sk\e"
    elseif l:currentcharacter==#"V"
        execute "normal! sK\e"
    elseif l:currentcharacter==#"b"
        execute "normal! sx\e"
    elseif l:currentcharacter==#"B"
        execute "normal! sX\e"
    elseif l:currentcharacter==#"n"
        execute "normal! sb\e"
    elseif l:currentcharacter==#"N"
        execute "normal! sB\e"
    elseif l:currentcharacter==#"m"
        execute "normal! sm\e"
    elseif l:currentcharacter==#"M"
        execute "normal! sM\e"
    elseif l:currentcharacter==#","
        execute "normal! sw\e"
    elseif l:currentcharacter==#"<"
        execute "normal! sW\e"
    elseif l:currentcharacter==#"."
        execute "normal! sv\e"
    elseif l:currentcharacter==#">"
        execute "normal! sV\e"
    elseif l:currentcharacter==#"/"
        execute "normal! sz\e"
    elseif l:currentcharacter==#"?"
        execute "normal! sZ\e"
    endif
endfunction

function! LaTeXToPDF()
    !pdflatex %:t
    let l:filename=split(expand('%:t'), '\.')[0]
    let l:auxremove="rm " . l:filename .".aux"
    let l:dviremove="rm " . l:filename .".dvi"
    let l:logremove="rm " . l:filename .".log"
    let l:outremove="rm " . l:filename .".out"
    let x=system(l:auxremove . " && " . l:dviremove . " && " . l:logremove . " && " . l:outremove)
endfunction

" ============================================================================
" coc.nvim
" ============================================================================
" May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
" utf-8 byte sequence
set encoding=utf-8

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
" inoremap <silent><expr> <TAB>
"       \ coc#pum#visible() ? coc#pum#next(1) :
"       \ CheckBackspace() ? "\<Tab>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
" previously gd, gy, gi, gr
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <leader>t <Plug>(coc-type-definition)
nmap <silent> <leader>i <Plug>(coc-implementation)
nmap <silent> <leader>r <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
